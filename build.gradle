apply plugin: 'java' 
apply plugin: 'war' 
apply plugin: 'eclipse'
repositories {
  flatDir { dirs "./" }
  mavenCentral()
}
project.buildDir = './'
project.description = 'building Certification project'


dependencies {
  testCompile group: 'junit', name: 'junit', version: '4.+'
  compile "com.google.inject:guice:3.0", "com.google.inject.extensions:guice-servlet:3.0", 
  "com.google.inject.extensions:guice-persist:3.0",
  "mysql:mysql-connector-java:5.1.6",
  "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final",
  "junit:junit:4.+",
  "org.hibernate:hibernate-entitymanager:4.2.1.Final",
  "log4j:log4j:1.2.17",
  "org.antlr:ST4:4.0.7",
  "org.codemonkey.simplejavamail:simple-java-mail:2.1",
  "org.apache.commons:commons-lang3:3.3.2",
  "htmlcompressor:htmlcompressor:1.5.3",
  'commons-logging:commons-logging:1.1.3',
  "com.googlecode.json-simple:json-simple:1.1",
  'com.lowagie:itext:2.1.7',
  'dom4j:dom4j:1.6.1',
  'org.apache.pdfbox:pdfbox:2.0.0-RC3',
  'org.apache.pdfbox:pdfbox-tools:2.0.0-RC1',
  "org.json:json:20151123"
}

task buildlibdir(type: Copy) {  
  into "./src/main/webapp/WEB-INF/lib/"  
  from configurations.runtime  
}

task cleanlibdir (type: Delete){  
    doLast {  
        FileTree tree = fileTree (dir: "./src/main/webapp/WEB-INF/lib/");  
        tree.each { File file ->    
            delete(file)  
        }  
    }  
}

task cleanclassdir (type: Delete){  
    doLast {  
        FileTree tree = fileTree (dir: "./src/main/webapp/WEB-INF/classes/");  
        tree.each { File file ->    
            delete(file)  
        }  
    }  
}

eclipse {
  classpath {
    //customizing the classes output directory:
    defaultOutputDir = file('./src/main/webapp/WEB-INF/classes')
  }
}


task createdirs() << {
   def list = ['info', 'run', 'source', 'src']
   list.each { dirname -> 
    def subdir = new File(project.buildDir, dirname)
        subdir.mkdirs() 
   }
   
   def srcDir = new File(project.buildDir, 'src')
   list = ['main', 'test']
   list.each { dirname -> 
    def subdir = new File(srcDir, dirname)
      subdir.mkdirs()
   }
	def mainDr = new File(srcDir, 'main')
   list = ['java', 'webapp', 'resources', 'test']
   list.each { dirname -> 
    def subdir = new File(mainDr, dirname)
      subdir.mkdirs()
   }
}

